package openssl

import "testing"

func TestBytesToKeyGenerator(t *testing.T) {
	var (
		pass = []byte("myverysecretpass")
		salt = []byte{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7}
	)

	for name, tc := range map[string]struct {
		CG CredsGenerator
		OC OpenSSLCreds
	}{
		"MD5": {CG: BytesToKeyMD5, OC: OpenSSLCreds{
			Key: []uint8{0x74, 0x34, 0x34, 0x2c, 0x27, 0xf, 0xa0, 0x39, 0x43, 0x8d, 0xa7, 0xb2, 0x89, 0x8c, 0x6b, 0x3c, 0xa9, 0x36, 0xdc, 0xe3, 0xd2, 0x70, 0x5e, 0x80, 0x5d, 0xa2, 0x98, 0x7e, 0x58, 0x8, 0xcc, 0x6},
			IV:  []uint8{0xe2, 0xb, 0xb8, 0xb5, 0xcc, 0xbc, 0x14, 0x5, 0x70, 0x57, 0x34, 0xac, 0xce, 0x10, 0x40, 0xa9},
		}},
		"SHA1": {CG: BytesToKeySHA1, OC: OpenSSLCreds{
			Key: []uint8{0x18, 0x67, 0x18, 0xde, 0x1, 0x73, 0x2, 0x91, 0x46, 0xa4, 0x5c, 0xe4, 0x4c, 0xd5, 0xd9, 0x52, 0x24, 0xdd, 0xe0, 0xcc, 0x3d, 0xa6, 0x34, 0x12, 0xb5, 0xba, 0x41, 0xf4, 0xab, 0x4b, 0x99, 0x27},
			IV:  []uint8{0x5a, 0xe1, 0xc3, 0xd9, 0xac, 0xe6, 0x59, 0xd3, 0x9, 0x84, 0x2c, 0xff, 0x32, 0xa8, 0xd1, 0x8b},
		}},
		"SHA256": {CG: BytesToKeySHA256, OC: OpenSSLCreds{
			Key: []uint8{0xc3, 0x9, 0xee, 0x4c, 0x68, 0x9, 0xdf, 0x8c, 0x1, 0x37, 0xf8, 0xd, 0x84, 0x9, 0xda, 0xc2, 0xc8, 0xc4, 0xe0, 0x54, 0x34, 0x9d, 0x17, 0xdd, 0xc1, 0xd6, 0x39, 0xc, 0x39, 0x99, 0x7, 0xb},
			IV:  []uint8{0xd3, 0x41, 0x1c, 0x53, 0xb5, 0xc4, 0x9f, 0xb3, 0x39, 0x69, 0xe, 0xac, 0x86, 0xd0, 0x71, 0x7},
		}},
	} {
		res, err := tc.CG(pass, salt)
		if err != nil {
			t.Fatalf("Generator %s caused an error: %s", name, err)
		}

		if !res.equals(tc.OC) {
			t.Errorf("Generator %s yielded unexpected result: exp=%#v res=%#v", name, tc.OC, res)
		}
	}
}
